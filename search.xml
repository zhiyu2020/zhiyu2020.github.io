<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ros_beginner</title>
      <link href="/2020/05/29/ros-beginner/"/>
      <url>/2020/05/29/ros-beginner/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="introduction-background"><a href="#introduction-background" class="headerlink" title="introduction(background):"></a>introduction(background):</h1><p>最近两周开始学习机器人相关的技术包括ROS工具平台和SLAM算法。一开始没有使用相关的教材，导致装环境也是看别人整理的blog, 非常琐碎。于是花了几天搜索了一下国内相对好点的教程资源，确定了要学习的内容 - 工具ROS 以及算法部分SLAM。 </p><h1 id="resources"><a href="#resources" class="headerlink" title="resources:"></a>resources:</h1><ul><li>深蓝学院的课程几乎涵盖所有人工智能相关的内容，同时讲课的也是业界有知名度的人物， 目前看了古月居的ROS课程和机械臂开发 以及高翔讲授的slam入门课程 - 配套他的作品&lt;&lt;视觉SLAM十四讲&gt;&gt;。</li><li>关注blog: 泡泡机器人(对于做科研的同学来说是福音 上传了很多相关论文资源) 古月居blog(讲授的内容更贴近实战，在于掌握会用工具)。</li><li>目前了解该领域比较少，自己也在探索中，后面会继续补充</li></ul><h1 id="my-experience-in-learning-Robotics"><a href="#my-experience-in-learning-Robotics" class="headerlink" title="my experience in learning Robotics:"></a>my experience in learning Robotics:</h1><ul><li><p>首先说下我学习机器人相关的内容也是为了找相关实习，目标比较单一直接，鉴于之前投简历的时候都没有相关的项目，着实尴尬，投了好几家都没有回复，后来下定决心开始学习ROS相关的工具先做出一点东西来，目前学到ROS平台下Gazebo仿真，相当于课程的一半，由于本身也是计算机科班出身，我在3月底开始准备找实习，每天坚持刷算法题和补充C++知识点，Ubuntu这种OS也是很早就碰过了，可能学工具会很好上手点， 但是涉及到算法SLAM数学部分，就很捉襟见肘了，目前也在弥补这块的劣势，将数学公式与算法结合起来学习。<br><img src="SLAMpic.jpg" alt><br><img src="Ros.jpg" alt></p></li><li><p>1.安装ROS平台</p><ul><li>这个可以说是非常坑的了，我当时听了一个朋友的话做个cartographer仿真跑算法的小demo，结果搜了一圈需要先安装ROS环境，因为安装会报错(后来发现是安装包的问题 用国内大神张明明做好的三个包安装一次性完成的 浪费了三天时间…) 安装ROS我参考的这个<a href="https://zhuanlan.zhihu.com/p/128035718" target="_blank" rel="noopener">blog1</a><a href="https://www.jianshu.com/p/bfbc833c719b" target="_blank" rel="noopener">  blog2</a>，里面介绍的很全了，大家可以拿去用现成的。</li></ul></li><li><p>2.ROS基础:</p><ul><li><p>接下来根据古月居的课程 需要了解ROS基本架构 通信编程之类的 在此需要学习 因为后期开发自己的ROS包 都是自己去写那些函数的 主要关注service topic action tf坐标变换即可 下面主要对这几点做出梳理:</p></li><li><p><strong>service programing</strong><br><img src="rosservice.png" alt><br><img src="ros_set_srv.png" alt="srv_msg"></p><table><thead><tr><th>server</th><th>client</th></tr></thead><tbody><tr><td>init ROS</td><td>init ROS</td></tr><tr><td>create Server instance</td><td>create Client instance</td></tr><tr><td>循环等待服务请求 进入回调函数</td><td>publish 服务请求数据</td></tr><tr><td>在回调函数中完成服务请求+反馈(类似tcp/ip握手模型)</td><td>等待Server处理后的应答结果</td></tr></tbody></table><p> <img src="server_ros.png" alt="server"><br> <img src="client_ros.png" alt="client"></p></li><li><p><strong>topic programming</strong><br> <img src="rostopic.png" alt="topic"><br> <img src="ros_topic_msg.png" alt="topic_msg"><br> 下面来看talker和subscriber分别做了什么</p><table><thead><tr><th>talker</th><th>subscriber</th></tr></thead><tbody><tr><td>init ROS</td><td>init ROS</td></tr><tr><td>向ROS Master注册节点信息(发布话题名和话题消息类型)</td><td>订阅需要topic</td></tr><tr><td>按照频率循环发布</td><td>循环等待话题消息 接收到消息后进入回调函数</td></tr><tr><td></td><td>在回调函数中完成消息处理</td></tr></tbody></table><p> <img src="topic_talker.png" alt="talker"><br> <img src="topic_subscriber.png" alt="subscriber"></p><ul><li>课后作业参考该<a href="https://blog.csdn.net/qq_42585108/article/details/104852100" target="_blank" rel="noopener">blog1</a></li><li>还需在对应的camkelists配置好才行</li></ul></li></ul></li></ul><pre><code>```add_executable(talker src/talker.cpp)target_link_libraries(talker ${catkin_LIBRARIES})# add_dependencies(talker ${PROJECT_NAME}_generate_messages_cpp)add_executable(listener src/listener.cpp)target_link_libraries(listener ${catkin_LIBRARIES})# add_dependencies(talker ${PROJECT_NAME}_generate_messages_cpp)```- msg 定义![topic_msg](ros_topic_msg.png)</code></pre><ul><li><strong>action programming</strong><br><img src="ros_action.png" alt="action1"><br><img src="ros_action_msg.png" alt="action2"><br><img src="action_ros.png" alt="action3"><br><img src="action_cli_ros.png" alt="action4"></li><li><strong>tf programming</strong><br><img src="tf.png" alt="tf1"><br><img src="tf_listener.png" alt="tf2"><br><a href="https://www.guyuehome.com/279" target="_blank" rel="noopener">作业参考</a></li><li>以上步骤 每次完成相应的camke 都需要catkin_make check是否正确, 当然你们也需要给自己的ubuntu配上编程环境<a href="https://blog.csdn.net/weixin_35695879/article/details/85254422" target="_blank" rel="noopener">参考blog</a><ul><li>后续更新ing<!--more--></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ros </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ros </tag>
            
            <tag> slam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bt_program</title>
      <link href="/2020/01/10/bt-program/"/>
      <url>/2020/01/10/bt-program/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>learning_tech</title>
      <link href="/2019/12/12/learning-tech/"/>
      <url>/2019/12/12/learning-tech/</url>
      
        <content type="html"><![CDATA[<p>summary:本节是对左耳听风学习章节的摘录 部分更新自己的感悟</p><h1 id="高效学习-端正学习态度"><a href="#高效学习-端正学习态度" class="headerlink" title="高效学习:端正学习态度"></a>高效学习:端正学习态度</h1><h2 id="主动-or-被动学习"><a href="#主动-or-被动学习" class="headerlink" title="主动 or 被动学习"></a>主动 or 被动学习</h2><p><img src="1.png" alt></p><ul><li><strong>被动学习:</strong> 听讲 阅读 视听 演示 只有 5% - 30%</li><li><strong>主动学习:</strong> 讨论 实践 教授 50% - 90%</li><li>只有自己在思考总结归纳 找人交流 开始践行 对外输出才能掌握知识</li></ul><h2 id="深度-or-浅度学习"><a href="#深度-or-浅度学习" class="headerlink" title="深度 or 浅度学习"></a>深度 or 浅度学习</h2><ul><li>浅度学习由于当前的社会环境造成 人们只愿意读一些快餐内容</li><li>精英会在源头找资料 深度钻研后 通过自己的思考 产生更好的内容 大部分人是 轻度学习 消费内容<h3 id="掌握升读学习的关键"><a href="#掌握升读学习的关键" class="headerlink" title="掌握升读学习的关键"></a>掌握升读学习的关键</h3></li><li>高质量的信息源和第一手的知识</li><li>把知识连成地图 将自己的理解复述出来</li><li>不断反思和思辨 与不同年龄段的人讨论</li><li>举一反三 践行之 把知识转化为技能</li><li>学习的三个步骤:<ul><li><strong>知识采集</strong>:信息源很重要 是步骤的关键</li><li><strong>知识缝合</strong>:连接记忆 逻辑推理 知识梳理(类似高效学习里面的 step2 3 理解后 进行联想等方法的强化)</li><li><strong>技能转换</strong> 举一反三 实践和练习 教授(检验和实践 + 费曼技巧)<h2 id="学习目的-找到方法"><a href="#学习目的-找到方法" class="headerlink" title="学习目的:找到方法"></a>学习目的:找到方法</h2></li></ul></li><li>只有掌握解题的思维和方法 才有解决问题的能力 <strong>学习为了找到通往答案的路径和方法 为了拥有无师自通的能力</strong></li></ul><h2 id="学习目的-找到原理"><a href="#学习目的-找到原理" class="headerlink" title="学习目的:找到原理"></a>学习目的:找到原理</h2><ul><li>为了理解思考 一旦掌握本质东西 就会发现复杂多变的世界在变得越来越简单 一通百通</li></ul><h2 id="学习目的-了解自己"><a href="#学习目的-了解自己" class="headerlink" title="学习目的:了解自己"></a>学习目的:了解自己</h2><ul><li>开拓眼界目的是发现自己的不足和上升空间 从而让自己成长</li></ul><h2 id="学习目的-为了改变自己"><a href="#学习目的-为了改变自己" class="headerlink" title="学习目的:为了改变自己"></a>学习目的:为了改变自己</h2><ul><li>改变自己的思维方式 思考方式 改变自己与生俱来的低效学习方法 改变自己 行动和践行 反思和改善 从而获得成长<h1 id="高效学习-源头、原理和知识地图"><a href="#高效学习-源头、原理和知识地图" class="headerlink" title="高效学习:源头、原理和知识地图"></a>高效学习:源头、原理和知识地图</h1><h2 id="挑选知识和信息源"><a href="#挑选知识和信息源" class="headerlink" title="挑选知识和信息源"></a>挑选知识和信息源</h2></li><li>用google 英文关键词找到自己想要的知识 算是跟得上时代 / 在社区里和大牛交流得到答案 算是领先时代</li><li>信息源的特质:<ul><li>第一手资料 不是被人理解过的 消化过的二手资料 尤其对于知识性的东西 需要原汁原味</li><li>需要有作证 数据 引用 被时间和实践检验过的</li><li>应该加入部分自己的经验和思考 可以引发人深思的<h2 id="注重基础和原理"><a href="#注重基础和原理" class="headerlink" title="注重基础和原理"></a>注重基础和原理</h2></li></ul></li><li>基础知识和原理东西很重要 </li><li>比如学了足够多的语言 有丰富的实践后 开始对编程语言的各种编程范式或控制流有原理上的了解 再学新的语言 就会学的飞快</li><li><strong>关键:基础知识和原理性的东西技术 都是经过长时间的考验的 所以基础技术有很多人类历史的结晶会带来很多启发</strong></li></ul><h2 id="使用知识图-–-俗称脑图"><a href="#使用知识图-–-俗称脑图" class="headerlink" title="使用知识图 – 俗称脑图"></a>使用知识图 – 俗称脑图</h2><ul><li>作者将c++学习内容 用联想记忆法分为三部分<ul><li>1.解决c语言问题 c语言的问题:指针 宏 错误处理 数据拷贝 c++用什么技术解决</li><li>2.c++面向对象的特性:封装 继承 多态。封装，让我想到了构造函数、析构函数等。构造函数让我想到了初始化列表，想到了默认构造函数，想到了拷贝构造函数，想到了new……多态，让我想到了虚函数，想到了 RTTI，RTTI 让我想到了dynamic_cast 和 typeid 等。</li><li>3.泛型编程:template 操作符重载  stl 容器 通用算法</li><li><strong>重要的是：当发现不知道的知识点时候 会往知识树上挂 使得学习更为全面系统</strong><h1 id="高效学习-深度、归纳和坚持实践"><a href="#高效学习-深度、归纳和坚持实践" class="headerlink" title="高效学习:深度、归纳和坚持实践"></a>高效学习:深度、归纳和坚持实践</h1></li></ul></li></ul><h2 id="系统学习"><a href="#系统学习" class="headerlink" title="系统学习"></a>系统学习</h2><ul><li>学习技术的时候 需要问自己很多个为什么? 更加高级的脑图 以下是学习模板 把内容都填充式:<ul><li><strong>1.技术出现的background purpose initial_intense是要解决什么问题</strong>很关键 学习技术时候需要直到技术的成因和目标 是这个技术的灵魂 不知道的话 会不懂技术的设计理念  </li><li><strong>2.技术的pros/cons – trade-off</strong>:清楚技术的优势劣势 以及带来的挑战</li><li><strong>3.这个技术适用的场景</strong>一旦离开场景 会有槽点 场景一般分2个:业务场景 和技术场景</li><li><strong>4.技术组成部分和关键点</strong>技术的核心思想和核心组件 快速掌握是学习技术的核心部分</li><li><strong>5.技术底层原理和关键实现</strong>学习关键基础底层技术可以让你未来很快掌握其他技术</li><li><strong>6.已有的实现和它之间的对比</strong>不同的实现有不同侧重 可以得到不同的想法和思路 对于开阔眼界 深入细节很重要</li></ul></li></ul><h2 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h2><ul><li><p>包括以下基础能力:</p><ul><li>联想能力:需要平时不停思考同一件事物不同用法(scott的高效学习就有讲过这种技能的培养)</li><li>抽象能力:我理解成建模能力 就是把现实的问题抽象成数据结构或者算法</li><li>自省能力:得到解的时候 要站在自己的对立面来找解的漏洞 像左右互搏</li></ul></li><li><p>训练方法:</p><ul><li>1.对于同一个场景 制作各种不同的难题问题</li><li>2.对于一个问题 努力寻找尽可能多的解 比较这些解的优劣</li><li>3.对于一个解 努力找各种不同的测试案例 让其健壮</li></ul></li><li><p>需要喜欢思考和找别人来辩论讨论 看自己是否真的善于思考 是否有好奇心</p><h2 id="总结和归纳"><a href="#总结和归纳" class="headerlink" title="总结和归纳"></a>总结和归纳</h2></li><li><p>该过程对知识的消化和再加工</p></li><li><p>积累的知识越多 在知识间进行联系和区别能力越强 对知识总结概括能力越轻松</p></li><li><p>要提高能力 要多阅读 积累素材 扩大知识面 和别人讨论 多思辨 </p></li><li><p>当没有学透知识 不适合归纳总结 开始阶段不急于判断作结论 对知识保持开放</p></li><li><p><strong>把看到和学到的信息 规整好 排列好 关联好 把信息碎片结构化掉 在结构化的信息里找规律相通之处 共同点 进行简化 归纳总结 最后形成套路模式</strong></p><h2 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h2></li><li><p>作者借用他看的effective c++和more effective c++来举例 被书中的作者所折服 作者看了十多年 宝贵的是书中作者的思维方式</p><h2 id="坚持不懈"><a href="#坚持不懈" class="headerlink" title="坚持不懈"></a>坚持不懈</h2></li><li><p>需要有循环的坚持</p></li><li><p>需要把你的坚持形成成果晒出来 让别人点赞 另一方面 要把坚持作为习惯 到一种吃饭喝水的状态 不需要付出成本</p><h1 id="高效学习-如何学习和阅读代码"><a href="#高效学习-如何学习和阅读代码" class="headerlink" title="高效学习:如何学习和阅读代码"></a>高效学习:如何学习和阅读代码</h1><h2 id="读文档还是代码"><a href="#读文档还是代码" class="headerlink" title="读文档还是代码"></a>读文档还是代码</h2></li><li><p>代码 =&gt; what how details</p></li><li><p>文档/书 =&gt; what how why</p></li><li><p>如果像know人为什么这么搞 多去读书 文档</p></li><li><p>如果要知道让机器干了什么 就去看代码</p></li><li><p>都很重要 需要看目的</p></li><li><p><strong>如果想了解一种思想方法原理思路经验 读书和文档有效率</strong></p></li><li><p><strong>如果了解具体细节 如协程实现 模块性能 算法实现还是去读代码</strong></p></li></ul><h3 id="不同阶段的人"><a href="#不同阶段的人" class="headerlink" title="不同阶段的人"></a>不同阶段的人</h3><ul><li>新手 应该多读代码 动手写代码 新手会喜欢github</li><li>老手 需要理性认识 喜欢读好的书和文章</li></ul><h2 id="如何阅读源代码"><a href="#如何阅读源代码" class="headerlink" title="如何阅读源代码"></a>如何阅读源代码</h2><ul><li>需要掌握以下前提:<ul><li>基础知识</li><li>软件功能</li><li>相关文档</li><li>代码的组织结构</li></ul></li><li>然后了解软件代码的组成部分<ul><li>1.抽象接口定义</li><li>2.模块粘合层</li><li>3.业务流程</li><li>4.具体实现<ul><li>代码逻辑:业务逻辑+控制逻辑(flag控制变量)</li><li>出错处理</li><li>数据处理</li><li>重要的算法</li><li>底层交互</li></ul></li><li>5.运行时调试</li></ul></li><li>总结阅读代码方法:<ul><li>一般自顶向下 总体到细节</li><li>画图必要</li><li>代码逻辑归类 排除杂音</li><li>debug跟踪代码<h1 id="高效学习-面对枯燥和量大的知识"><a href="#高效学习-面对枯燥和量大的知识" class="headerlink" title="高效学习:面对枯燥和量大的知识"></a>高效学习:面对枯燥和量大的知识</h1><h2 id="如何面对枯燥的知识"><a href="#如何面对枯燥的知识" class="headerlink" title="如何面对枯燥的知识:"></a>如何面对枯燥的知识:</h2></li><li>知识太高级了对你来说 不知道用在什么地方</li><li>人的认知从感性到理性转换 先去找应用场景 学点实用的 再学理论</li><li>学习需要反馈 带着相关问题学习会更好</li><li>找到牛人讲解</li></ul></li></ul><h2 id="如何面对大量知识"><a href="#如何面对大量知识" class="headerlink" title="如何面对大量知识:"></a>如何面对大量知识:</h2><ul><li>一点点学 一口口吃</li><li>在学习 一定要学到本质 原理 这是经得住考验的</li><li>带着问题去学习 带着要解决的东西去学习</li><li>把学习心得 过程 笔记 代码分享出来 找到一起学习的人</li></ul><h2 id="认真read-docs"><a href="#认真read-docs" class="headerlink" title="认真read docs"></a>认真read docs</h2><ul><li>git操作文档 linux的man</li></ul><h2 id="其他几个适用技巧"><a href="#其他几个适用技巧" class="headerlink" title="其他几个适用技巧"></a>其他几个适用技巧</h2><ul><li><strong>用不同的方式来学习同一个东西</strong>如看树 听课 创建脑图 写博客 讲课</li><li><strong>不要被打断</strong>找一个别人找不到的地方</li><li><strong>总结压缩信息</strong> 高效学习有讲过类似的方法 将一门课的重点压缩成2-3页内容</li><li><strong>把未知关联到已知</strong>类比把 如go语言 对比c java来学 </li><li><strong>用教的方式来学习</strong> 教给别人自己会掌握95%的知识</li><li><strong>学以致用</strong> 学到的知识为了运用 可以巩固强化学习</li><li><strong>不要记忆</strong> 找方法 推导出结果的方法</li><li><strong>多犯错误</strong> 通过错误总结教训 没有比犯错体会的更深 不要犯低级错误</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术学习方法总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tech_learning_instruction</title>
      <link href="/2019/12/06/tech-learning-instruction/"/>
      <url>/2019/12/06/tech-learning-instruction/</url>
      
        <content type="html"><![CDATA[<p>summary: 2018程序员练级攻略</p><h1 id="编程范式相关"><a href="#编程范式相关" class="headerlink" title="编程范式相关"></a>编程范式相关</h1><ul><li>C语言<ul><li>NASA C style</li><li>c coding standard</li><li>c programing/structure and style</li><li>linux kernel coding style</li><li>GNU Coding standard</li></ul></li><li>c++语言<ul><li>c++ core guidelines</li><li>google c++ style guide</li></ul></li><li>java语言<ul><li>code conventions for the java programming language</li><li>google java style guide<h1 id="编程书籍"><a href="#编程书籍" class="headerlink" title="编程书籍"></a>编程书籍</h1><h2 id="java语言"><a href="#java语言" class="headerlink" title="java语言"></a>java语言</h2></li></ul></li><li>java核心技术 卷1基础知识</li><li>spring实战</li><li>spring boot实战</li><li>effective java(google Guava库)</li><li>java并发编程实战</li><li>java性能权威指南</li><li>深入理解java虚拟机</li><li>java编程思想</li><li>精通spring 4.x</li><li>设计模式</li></ul><h2 id="c-c"><a href="#c-c" class="headerlink" title="c/c++"></a>c/c++</h2><ul><li>c语言程序设计 Dennis M Ritchie</li><li>c语言程序设计现代方法</li><li>c陷阱与缺陷</li><li>c++ primer中文版</li><li>effective c++ / more effective c++</li><li>有难度：深度探索c++对象模型</li><li>c++ FAQ中文版<h1 id="理论学科"><a href="#理论学科" class="headerlink" title="理论学科"></a>理论学科</h1></li></ul><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><ul><li>算法(基础)</li><li>算法导论(理论)</li><li>编程珠玑(思维改变)</li><li>leetcode</li></ul><h2 id="其他理论学科"><a href="#其他理论学科" class="headerlink" title="其他理论学科"></a>其他理论学科</h2><ul><li><p>数据结构与算法分析</p></li><li><p>数据库系统概念</p></li><li><p>现代操作系统</p></li><li><p>计算机网络</p></li><li><p>计算机程序的构造和解释</p></li><li><p>编译原理</p></li></ul><h1 id="系统知识"><a href="#系统知识" class="headerlink" title="系统知识"></a>系统知识</h1><ul><li>深入理解计算机系统</li><li>难啃书籍</li><li>unix高级环境编程</li><li>unix网络编程 - C10K Problem</li><li>tcp/ip详解 卷1协议</li><li>轻松书籍</li><li>linux c编程一站式学校</li><li>tcp/ip网络编程</li><li>图解tcp/ip</li><li>the tcp/ip guide</li><li>实践:<br><img src="test2.png" alt></li></ul><br><div class="row">    <embed src="test.pdf" width="100%" height="550" type="application/pdf"></div><br>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>graduate_thesis</title>
      <link href="/2019/12/03/graduate-thesis/"/>
      <url>/2019/12/03/graduate-thesis/</url>
      
        <content type="html"><![CDATA[<center>Research and Application of Forest Cover in Australia Based on Deep Learning Method</center><br><div class="row">    <embed src="test.pdf" width="100%" height="550" type="application/pdf"></div><br>]]></content>
      
      
      <categories>
          
          <category> thesis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周复盘11/24</title>
      <link href="/2019/11/22/internship/"/>
      <url>/2019/11/22/internship/</url>
      
        <content type="html"><![CDATA[<p>summary: 周复盘19/11/18-11/24</p><h1 id="忙碌又充实的一周"><a href="#忙碌又充实的一周" class="headerlink" title="忙碌又充实的一周 @^@"></a>忙碌又充实的一周 @^@</h1><ul><li>申请的事情告一段落 这周陆续收到凯泽和tum的审核情况 凯泽那边开始截至审核了 然后我更新了一下我的雅思成绩 他们回复可以 接着继续看看bonn的情况的 结果发了邮件 他们没有鸟我 ennn 互相当备胎 谁怕谁啊 话说tum 前几天UA收到我的文件了 email了confirmation给我 我上传了之后就等着吧 个人感觉 德国的申请学校 如果语言过关了 基本不会看了 主要看的是匹配度 动机信以及成绩 会有个占比 tum就是按照这个排比的 匹配60分 分数20分 动机信论文 20分 &gt;70分直接录取了 本人水平有限 所以还是准备面试阶段了 我是和我老乡打算一起申请tum的 他也在苦逼的开始准备笔试面试了 周末小半天把 都在网上搜tum info 的面经资料 其实我挺喜欢这种感觉的 自己要资料 然后自己查 我从google -&gt; 知乎 -&gt; quora 一路看了过来 感觉收获最大的还是quora 有提供面经资料 也告诉大家如何准备面试的 妥妥的赞啊 经验贴目测是两位印度大佬贡献的 可能大家出国了以后都不怎么水知乎把 反正德国的看到的经验贴挺少的 还是大家都去英美了？</li><li>下面是截图 贴个<a href="https://www.quora.com/How-do-I-prepare-for-the-telephone-interview-for-the-informatics-masters-program-of-TUM" target="_blank" rel="noopener">链接</a>把 如果需要可以点进去看看哦 估计过段时间如果过了面试 我也出个面经 攒一下rp<br><img src="1.png" alt><br><img src="2.png" alt> </li><li>下周开始 其实从今天开始已经准备起慕尼黑的面试了 为了自己的目标 还是要好好准备的 圆了自己的梦 还有自己的目标 去大厂 去实习 ！ 计划2周时间准备 2-3周时间开始演练 背诵 接下来就是演戏了 还要看12月中旬申请学校结果 做最好的准备<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1></li><li>本周开始陆续接触到复杂的算法 有hash双链表实现 最恶心的红黑树 堆相对好一点 不过c语言实现是真的不友好啊 每次都要重新写轮子的感觉真的很不爽 尤其应用部分 使用优先队列来做的确很过分了…</li><li>下周目标:节奏放缓 3-4天看一下内容 一天3小时够了 能够看完图就心满意足了 实现也算的<br><img src="3.png" alt></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><ul><li>接下来的一个月将会比较艰难 准备tum的面试同时 等待其他三所学校的录取结果 anyway 尽最大的努力来完成 加油！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 每周复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>last half year in 2019</title>
      <link href="/2019/11/17/2019conclusion/"/>
      <url>/2019/11/17/2019conclusion/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="//music.163.com/outchain/player?type=1&id=75302730&auto=1&height=430"></iframe></div><p>summary:毕业半年一晃而过 自己也刚刚完成德国高校master的申请 也有部分学校在改材料 比如 材料多到爆炸的tum 不管结果如何 算是对自己半年的辛苦有个交代吧</p><h1 id="毕业前夕"><a href="#毕业前夕" class="headerlink" title="毕业前夕"></a>毕业前夕</h1><hr><p>2019年注定是一个不同的一年 我感觉自己真的非常匆忙 各种考试 还有毕业设计催着 后来回头来想想 当初因为自己的目标不明确所导致的 如果提前认识我现在的学长 老哥 经过他们的指导 可能我的时间会充分很多 比如把有效的证书提前考出来 多出来的时间好好学德语 甚至把自己未来的方向技能点出来 / 原谅我的yy 作为大龄待业青年请理解一下@^@</p><ul><li>2月份第一次考雅思</li><li>APS 一审挂</li><li>3-5月 毕业设计</li><li>GRE复习</li><li>自己作死选了2门经济学课程？</li></ul><p><strong>雅思备考</strong> :不多说 结果惨不忍睹 总分6 自己第一考轻敌 还花了些培训班的费用 我是在某鱼上买了某站的视频 效果看我的分数就知道了 算是裸考的 一个月复习 =  6 ？？ 坑！可以从我做剑雅真题错题情况看出来 后来我复习听力和阅读稳定在7 7.5以上</p><p><strong>关于毕设的一点想法</strong>: 我是在毕业后备考gre aps雅思的情况下 在网上看大量的视频资料 以及 请教了学长 包括工作了几十年的前辈 毕设做的内容和我现在想做的东西 没有多大联系 我打算以后做嵌入式方向 对没错 软硬件结合的方向 含金量比software要高 控制的有电路 底层 - 举个例子 stm32的飞控就可以算是小demo 我本科做的毕设是LSTM 相关的内容 就是AI 现在来看 最好就是很早确定方向 然后进行相关项目的训练 我现在联系的德国学长 基本在本科就确立了自己的目标 打比赛 算法也有很厚的底子 – 香港学校的学生素质果然不一样 </p><p><strong>选课问题</strong>: 这个也是我给自己设的坑啊 只听得德国匹配度很重要 却不晓得 自己未来专业的方向以及哪些课是缺的 综合最近申请的情况来看 国内cs ce专业和德国最不匹配的怕是 计算机理论部分 很多课程 学校都没有课程提供的 像formal language/ NP Hard 这些都是很理论的计算机课程 个人感觉要看学校平台了 不过提前知道选课的情况 去德国了选课留个心眼 好好准备选课的情况 绝不给自己挖坑 争取再不掉坑 当然录取的很大部分还是看申请人是不是很优秀 如果有很多奖项 参加比赛的 那肯定会加分增大录取概率</p><p><strong>APS审核</strong> 4月初第一次审核的时候自己复习没有找对方向 其实这个面试审核一点不难 在复习的时候 我总结了下 一般大三的课程 课程里面着重看目录和ch1 把一些能穿起来的性质记下来 防止自己说不够 - 一开始自己介绍课程的时候需要说些这个内容 目的我想你懂的 就是拖时间 9月份第二次面试(整整拖了半年！)的时候我超时了 虽然过了 但是考官在最后也说了我这个问题 (考官肯定是知道我的用意的) / 还有一个事情 运气也是很重要的！！！ 在第一次面试的时候 碰到的考官不是很好 问我的问题很坑 涉及到了计算手撕数学题 笔试的题目也是三道Laplace题目 看的我一愣一愣的 相反 我第二次面试的考官在我回答不出来的时候 会主动给我提供思路和方法 我非常感谢这种nett的考官 给我过了 也是那一场里面最幸运的一个了 其他三位同胞都无情的挂了</p><p><strong>GRE备考</strong> 我是19年2月份才知道需要准备GRE的 2个月的刷题 + 1-2个月的学习套路 怎么说 这个考试应该越早考越好 不像TI G有5年的时间 所以不会担心成绩会失效 对于去美国的同学不刷到325 怕是会有拖后腿的节奏 德国的要求相对低很多了 我是在发挥失常的情况下 把分数递交过去了 现在看来 分高不高都行 只要过学校的底线就行了</p><h1 id="毕业后"><a href="#毕业后" class="headerlink" title="毕业后"></a>毕业后</h1><p>一直到今天为止 考过GRE APS IELTS 可以说这三座山都应该提前知道其难度 好好做准备的 因为这三门考试在国内都已经提高要求 而且涨价了 希望有出国打算的学弟学妹需要好好规划时间 尤其是DIY的同学 要算好时间 打有准备的仗 找中介的自己也要上心啊 之前在abcdv论坛上也看到有人因为中介坑了 哎 我还得补德语 + 技术 最好的一个建议就是找小队组团学习 GRE IELTS团队协作的话 可以取长补短 效果非常好的 可惜我没有机会了 对于大一大二的同学可以找个队友 说不定还能找到对象了 哈哈</p><p><strong>择校 + 申请</strong> 这块也是很折腾人精力和钱的部分 想想一所学校GRE 27刀要 有的学校如TUM还需要UA vpd审核 75欧 对于这块我没有很多想说的 网上资料也有很多 我想提醒大家的是 一定要关注申请学校的截至时间！关注截至时间！ 关注截至时间！ 像我弄完所有材料已经是11月初了 这个时候亚琛和不来梅的申请已经截至 哎 多申请有底气啊 何况是春季 学校本来就不多了 所以啊 要看时间的 目前申请的几所 有freiburg被拒了 语言成绩不够 TUM还在等VPD审核材料 寄的很晚了 555555 希望能够按时到达把 贴几张申请的材料图片</p><ul><li><p>tum<br><img src="pic1.jpg" alt></p></li><li><p>stuttgart<br><img src="pic2.png" alt></p></li></ul><p><strong>目前:</strong> 忙完了申请季 我得回回血 开始技术栈的拓展了 从c语言的数据结构算法 后续得搞编译器 os 又是一条坎坷的路 不过有一个小群体在一起学 anyway 努力让自己的青春不后悔 毕竟走了那么多的弯路 我回顾过来都哭了 没资源 身边的同学没有那种觉悟 - 希望以后一切安好！ </p>]]></content>
      
      
      <categories>
          
          <category> thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinking </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
